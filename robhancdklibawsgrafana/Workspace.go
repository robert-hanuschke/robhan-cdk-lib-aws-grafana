package robhancdklibawsgrafana

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/robert-hanuschke/robhan-cdk-lib-aws-grafana/robhancdklibawsgrafana/jsii"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsiam"
	"github.com/aws/constructs-go/constructs/v10"
)

// Specifies a workspace.
//
// In a workspace, you can create Grafana dashboards and visualizations to
// analyze your metrics, logs, and traces. You don't have to build, package, or deploy any hardware
// to run the Grafana server.
type Workspace interface {
	WorkspaceBase
	// Specifies whether the workspace can access AWS resources in this AWS account only, or whether it can also access AWS resources in other accounts in the same organization.
	//
	// If this is
	// ORGANIZATION, the OrganizationalUnits parameter specifies which organizational units the
	// workspace can access.
	AccountAccessType() AccountAccessType
	// Specifies whether this workspace uses SAML 2.0, AWS IAM Identity Center, or both to authenticate users for using the Grafana console within a workspace.
	AuthenticationProviders() *[]AuthenticationProviders
	// A unique, case-sensitive, user-provided identifier to ensure the idempotency of the request.
	ClientToken() *string
	// The date that the workspace was created.
	CreationTimestamp() *string
	// Specifies the AWS data sources that have been configured to have IAM roles and permissions created to allow Amazon Managed Grafana to read data from these sources.
	//
	// This list is only used when the workspace was created through the AWS console, and the
	// permissionType is SERVICE_MANAGED.
	DataSources() *[]*string
	// The user-defined description of the workspace.
	Description() *string
	// The URL that users can use to access the Grafana console in the workspace.
	Endpoint() *string
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	Env() *awscdk.ResourceEnvironment
	// Specifies the version of Grafana supported by this workspace.
	GrafanaVersion() *string
	// The most recent date that the workspace was modified.
	ModificationTimestamp() *string
	// The name of the workspace.
	Name() *string
	// The configuration settings for network access to your workspace.
	NetworkAccessControl() *NetworkAccessControl
	// The tree node.
	Node() constructs.Node
	// The AWS notification channels that Amazon Managed Grafana can automatically create IAM roles and permissions for, to allow Amazon Managed Grafana to use these channels.
	NotificationDestinations() *[]NotificationDestinations
	// Specifies the organizational units that this workspace is allowed to use data sources from, if this workspace is in an account that is part of an organization.
	OrganizationalUnits() *[]*string
	// The name of the IAM role that is used to access resources through Organizations.
	OrganizationRoleName() *string
	// If this is SERVICE_MANAGED, and the workplace was created through the Amazon Managed Grafana console, then Amazon Managed Grafana automatically creates the IAM roles and provisions the permissions that the workspace needs to use AWS data sources and notification channels.
	//
	// If this is CUSTOMER_MANAGED, you must manage those roles and permissions yourself.
	//
	// If you are working with a workspace in a member account of an organization and that account is
	// not a delegated administrator account, and you want the workspace to access data sources in
	// other AWS accounts in the organization, this parameter must be set to CUSTOMER_MANAGED.
	PermissionType() PermissionTypes
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	PhysicalName() *string
	// Whether plugin administration is enabled in the workspace.
	//
	// Setting to true allows workspace
	// admins to install, uninstall, and update plugins from within the Grafana workspace.
	//
	// This option is only valid for workspaces that support Grafana version 9 or newer.
	PluginAdminEnabled() *bool
	// The IAM role that grants permissions to the AWS resources that the workspace will view data from.
	Role() awsiam.IRole
	// If the workspace uses SAML, use this structure to map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the Admin and Editor roles in the workspace.
	SamlConfiguration() *SamlConfiguration
	// Specifies whether the workspace's SAML configuration is complete.
	SamlConfigurationStatus() SamlConfigurationStatuses
	// The ID of the IAM Identity Center-managed application that is created by Amazon Managed Grafana.
	SsoClientId() *string
	// The stack in which this resource is defined.
	Stack() awscdk.Stack
	// The name of the AWS CloudFormation stack set that is used to generate IAM roles to be used for this workspace.
	StackSetName() *string
	// The current status of the workspace.
	Status() Status
	// The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to.
	VpcConfiguration() *VpcConfiguration
	// The arn of this workspace.
	WorkspaceArn() *string
	// The unique ID of this workspace.
	WorkspaceId() *string
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	GetResourceNameAttribute(nameAttr *string) *string
	GetWorkspaceArn(workspaceId *string) *string
	GetWorkspaceId(workspaceArn *string) *string
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for Workspace
type jsiiProxy_Workspace struct {
	jsiiProxy_WorkspaceBase
}

func (j *jsiiProxy_Workspace) AccountAccessType() AccountAccessType {
	var returns AccountAccessType
	_jsii_.Get(
		j,
		"accountAccessType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) AuthenticationProviders() *[]AuthenticationProviders {
	var returns *[]AuthenticationProviders
	_jsii_.Get(
		j,
		"authenticationProviders",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) ClientToken() *string {
	var returns *string
	_jsii_.Get(
		j,
		"clientToken",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) CreationTimestamp() *string {
	var returns *string
	_jsii_.Get(
		j,
		"creationTimestamp",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) DataSources() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"dataSources",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) Description() *string {
	var returns *string
	_jsii_.Get(
		j,
		"description",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) Endpoint() *string {
	var returns *string
	_jsii_.Get(
		j,
		"endpoint",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) GrafanaVersion() *string {
	var returns *string
	_jsii_.Get(
		j,
		"grafanaVersion",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) ModificationTimestamp() *string {
	var returns *string
	_jsii_.Get(
		j,
		"modificationTimestamp",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) NetworkAccessControl() *NetworkAccessControl {
	var returns *NetworkAccessControl
	_jsii_.Get(
		j,
		"networkAccessControl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) NotificationDestinations() *[]NotificationDestinations {
	var returns *[]NotificationDestinations
	_jsii_.Get(
		j,
		"notificationDestinations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) OrganizationalUnits() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"organizationalUnits",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) OrganizationRoleName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"organizationRoleName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) PermissionType() PermissionTypes {
	var returns PermissionTypes
	_jsii_.Get(
		j,
		"permissionType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) PluginAdminEnabled() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"pluginAdminEnabled",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) Role() awsiam.IRole {
	var returns awsiam.IRole
	_jsii_.Get(
		j,
		"role",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) SamlConfiguration() *SamlConfiguration {
	var returns *SamlConfiguration
	_jsii_.Get(
		j,
		"samlConfiguration",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) SamlConfigurationStatus() SamlConfigurationStatuses {
	var returns SamlConfigurationStatuses
	_jsii_.Get(
		j,
		"samlConfigurationStatus",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) SsoClientId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"ssoClientId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) StackSetName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"stackSetName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) Status() Status {
	var returns Status
	_jsii_.Get(
		j,
		"status",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) VpcConfiguration() *VpcConfiguration {
	var returns *VpcConfiguration
	_jsii_.Get(
		j,
		"vpcConfiguration",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) WorkspaceArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"workspaceArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Workspace) WorkspaceId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"workspaceId",
		&returns,
	)
	return returns
}


func NewWorkspace(scope constructs.Construct, id *string, props *WorkspaceProps) Workspace {
	_init_.Initialize()

	if err := validateNewWorkspaceParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_Workspace{}

	_jsii_.Create(
		"@robhan-cdk-lib/aws_grafana.Workspace",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

func NewWorkspace_Override(w Workspace, scope constructs.Construct, id *string, props *WorkspaceProps) {
	_init_.Initialize()

	_jsii_.Create(
		"@robhan-cdk-lib/aws_grafana.Workspace",
		[]interface{}{scope, id, props},
		w,
	)
}

func Workspace_FromWorkspaceAttributes(scope constructs.Construct, id *string, attrs *WorkspaceAttributes) IWorkspace {
	_init_.Initialize()

	if err := validateWorkspace_FromWorkspaceAttributesParameters(scope, id, attrs); err != nil {
		panic(err)
	}
	var returns IWorkspace

	_jsii_.StaticInvoke(
		"@robhan-cdk-lib/aws_grafana.Workspace",
		"fromWorkspaceAttributes",
		[]interface{}{scope, id, attrs},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func Workspace_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateWorkspace_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@robhan-cdk-lib/aws_grafana.Workspace",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
func Workspace_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateWorkspace_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@robhan-cdk-lib/aws_grafana.Workspace",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
func Workspace_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateWorkspace_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@robhan-cdk-lib/aws_grafana.Workspace",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func Workspace_IsWorkspace(x interface{}) *bool {
	_init_.Initialize()

	if err := validateWorkspace_IsWorkspaceParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@robhan-cdk-lib/aws_grafana.Workspace",
		"isWorkspace",
		[]interface{}{x},
		&returns,
	)

	return returns
}

func (w *jsiiProxy_Workspace) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := w.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		w,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (w *jsiiProxy_Workspace) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		w,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (w *jsiiProxy_Workspace) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := w.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		w,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (w *jsiiProxy_Workspace) GetResourceNameAttribute(nameAttr *string) *string {
	if err := w.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		w,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (w *jsiiProxy_Workspace) GetWorkspaceArn(workspaceId *string) *string {
	if err := w.validateGetWorkspaceArnParameters(workspaceId); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		w,
		"getWorkspaceArn",
		[]interface{}{workspaceId},
		&returns,
	)

	return returns
}

func (w *jsiiProxy_Workspace) GetWorkspaceId(workspaceArn *string) *string {
	if err := w.validateGetWorkspaceIdParameters(workspaceArn); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		w,
		"getWorkspaceId",
		[]interface{}{workspaceArn},
		&returns,
	)

	return returns
}

func (w *jsiiProxy_Workspace) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		w,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}


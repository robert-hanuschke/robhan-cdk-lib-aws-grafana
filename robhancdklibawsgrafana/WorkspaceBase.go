package robhancdklibawsgrafana

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/robert-hanuschke/robhan-cdk-lib-aws-grafana/robhancdklibawsgrafana/jsii"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsiam"
	"github.com/aws/constructs-go/constructs/v10"
	"github.com/robert-hanuschke/robhan-cdk-lib-aws-grafana/robhancdklibawsgrafana/internal"
)

type WorkspaceBase interface {
	awscdk.Resource
	IWorkspace
	// The account access type for the workspace.
	AccountAccessType() AccountAccessType
	// The authentication providers for the workspace.
	AuthenticationProviders() *[]AuthenticationProviders
	// The client token for the workspace.
	ClientToken() *string
	// The data sources of this workspace.
	DataSources() *[]*string
	// The description of this workspace.
	Description() *string
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	Env() *awscdk.ResourceEnvironment
	// The name of this workspace.
	Name() *string
	// The configuration settings for network access to your workspace.
	NetworkAccessControl() *NetworkAccessControl
	// The tree node.
	Node() constructs.Node
	// The notification destinations for the workspace.
	NotificationDestinations() *[]NotificationDestinations
	// Specifies the organizational units that this workspace is allowed to use data sources from, if this workspace is in an account that is part of an organization.
	OrganizationalUnits() *[]*string
	// The name of the IAM role that is used to access resources through Organizations.
	OrganizationRoleName() *string
	// The permission type for the workspace.
	PermissionType() PermissionTypes
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	PhysicalName() *string
	// Whether plugin administration is enabled in the workspace.
	//
	// Setting to true allows workspace
	// admins to install, uninstall, and update plugins from within the Grafana workspace.
	//
	// This option is only valid for workspaces that support Grafana version 9 or newer.
	PluginAdminEnabled() *bool
	// The IAM role that grants permissions to the AWS resources that the workspace will view data from.
	Role() awsiam.IRole
	// If the workspace uses SAML, use this structure to map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the Admin and Editor roles in the workspace.
	SamlConfiguration() *SamlConfiguration
	// The stack in which this resource is defined.
	Stack() awscdk.Stack
	// The name of the AWS CloudFormation stack set that is used to generate IAM roles to be used for this workspace.
	StackSetName() *string
	// The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to.
	VpcConfiguration() *VpcConfiguration
	// The ARN of this workspace.
	WorkspaceArn() *string
	// The unique ID of this workspace.
	WorkspaceId() *string
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	GetResourceNameAttribute(nameAttr *string) *string
	GetWorkspaceArn(workspaceId *string) *string
	GetWorkspaceId(workspaceArn *string) *string
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for WorkspaceBase
type jsiiProxy_WorkspaceBase struct {
	internal.Type__awscdkResource
	jsiiProxy_IWorkspace
}

func (j *jsiiProxy_WorkspaceBase) AccountAccessType() AccountAccessType {
	var returns AccountAccessType
	_jsii_.Get(
		j,
		"accountAccessType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WorkspaceBase) AuthenticationProviders() *[]AuthenticationProviders {
	var returns *[]AuthenticationProviders
	_jsii_.Get(
		j,
		"authenticationProviders",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WorkspaceBase) ClientToken() *string {
	var returns *string
	_jsii_.Get(
		j,
		"clientToken",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WorkspaceBase) DataSources() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"dataSources",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WorkspaceBase) Description() *string {
	var returns *string
	_jsii_.Get(
		j,
		"description",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WorkspaceBase) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WorkspaceBase) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WorkspaceBase) NetworkAccessControl() *NetworkAccessControl {
	var returns *NetworkAccessControl
	_jsii_.Get(
		j,
		"networkAccessControl",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WorkspaceBase) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WorkspaceBase) NotificationDestinations() *[]NotificationDestinations {
	var returns *[]NotificationDestinations
	_jsii_.Get(
		j,
		"notificationDestinations",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WorkspaceBase) OrganizationalUnits() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"organizationalUnits",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WorkspaceBase) OrganizationRoleName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"organizationRoleName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WorkspaceBase) PermissionType() PermissionTypes {
	var returns PermissionTypes
	_jsii_.Get(
		j,
		"permissionType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WorkspaceBase) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WorkspaceBase) PluginAdminEnabled() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"pluginAdminEnabled",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WorkspaceBase) Role() awsiam.IRole {
	var returns awsiam.IRole
	_jsii_.Get(
		j,
		"role",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WorkspaceBase) SamlConfiguration() *SamlConfiguration {
	var returns *SamlConfiguration
	_jsii_.Get(
		j,
		"samlConfiguration",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WorkspaceBase) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WorkspaceBase) StackSetName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"stackSetName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WorkspaceBase) VpcConfiguration() *VpcConfiguration {
	var returns *VpcConfiguration
	_jsii_.Get(
		j,
		"vpcConfiguration",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WorkspaceBase) WorkspaceArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"workspaceArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_WorkspaceBase) WorkspaceId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"workspaceId",
		&returns,
	)
	return returns
}


func NewWorkspaceBase_Override(w WorkspaceBase, scope constructs.Construct, id *string, props *awscdk.ResourceProps) {
	_init_.Initialize()

	_jsii_.Create(
		"@robhan-cdk-lib/aws_grafana.WorkspaceBase",
		[]interface{}{scope, id, props},
		w,
	)
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func WorkspaceBase_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateWorkspaceBase_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@robhan-cdk-lib/aws_grafana.WorkspaceBase",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
func WorkspaceBase_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateWorkspaceBase_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@robhan-cdk-lib/aws_grafana.WorkspaceBase",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
func WorkspaceBase_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateWorkspaceBase_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@robhan-cdk-lib/aws_grafana.WorkspaceBase",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (w *jsiiProxy_WorkspaceBase) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := w.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		w,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (w *jsiiProxy_WorkspaceBase) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		w,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (w *jsiiProxy_WorkspaceBase) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := w.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		w,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (w *jsiiProxy_WorkspaceBase) GetResourceNameAttribute(nameAttr *string) *string {
	if err := w.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		w,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (w *jsiiProxy_WorkspaceBase) GetWorkspaceArn(workspaceId *string) *string {
	if err := w.validateGetWorkspaceArnParameters(workspaceId); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		w,
		"getWorkspaceArn",
		[]interface{}{workspaceId},
		&returns,
	)

	return returns
}

func (w *jsiiProxy_WorkspaceBase) GetWorkspaceId(workspaceArn *string) *string {
	if err := w.validateGetWorkspaceIdParameters(workspaceArn); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		w,
		"getWorkspaceId",
		[]interface{}{workspaceArn},
		&returns,
	)

	return returns
}

func (w *jsiiProxy_WorkspaceBase) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		w,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

